package com.kyrincloud.MysqlSharding;

import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.NClob;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Savepoint;
import java.sql.Statement;
import java.sql.Struct;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.Executor;

public abstract class AbstractShardingConnectionWrapper implements Connection {

	private boolean autoCommit = true;

	private boolean readOnly = true;

	private boolean closed;

	private int transactionIsolation = TRANSACTION_READ_UNCOMMITTED;

	public boolean isWrapperFor(Class<?> iface) throws SQLException {
		return iface.isInstance(this);
	}

	public <T> T unwrap(Class<T> iface) throws SQLException {
		 if (isWrapperFor(iface)) {
	            return (T) this;
	        }
	        throw new SQLException(String.format("[%s] cannot be unwrapped as [%s]", getClass().getName(), iface.getName()));
	}

	public abstract Statement createStatement() throws SQLException;

	public abstract Statement createStatement(int resultSetType,
			int resultSetConcurrency, int resultSetHoldability)
			throws SQLException;

	public abstract Statement createStatement(int resultSetType,
			int resultSetConcurrency) throws SQLException;

	public DatabaseMetaData getMetaData() throws SQLException {
		return getConnections().get(0).getMetaData();
	}

	public abstract PreparedStatement prepareStatement(String sql,
			int resultSetType, int resultSetConcurrency,
			int resultSetHoldability) throws SQLException;

	public abstract PreparedStatement prepareStatement(String sql,
			int resultSetType, int resultSetConcurrency) throws SQLException;

	public abstract PreparedStatement prepareStatement(String sql,
			int autoGeneratedKeys) throws SQLException;

	public abstract PreparedStatement prepareStatement(String sql,
			int[] columnIndexes) throws SQLException;

	public abstract PreparedStatement prepareStatement(String sql,
			String[] columnNames) throws SQLException;

	public abstract PreparedStatement prepareStatement(String sql)
			throws SQLException;

	public final CallableStatement prepareCall(final String sql)
			throws SQLException {
		throw new SQLFeatureNotSupportedException("prepareCall");
	}

	public final CallableStatement prepareCall(final String sql,
			final int resultSetType, final int resultSetConcurrency)
			throws SQLException {
		throw new SQLFeatureNotSupportedException("prepareCall");
	}

	public final CallableStatement prepareCall(final String sql,
			final int resultSetType, final int resultSetConcurrency,
			final int resultSetHoldability) throws SQLException {
		throw new SQLFeatureNotSupportedException("prepareCall");
	}

	public final String nativeSQL(final String sql) throws SQLException {
		throw new SQLFeatureNotSupportedException("nativeSQL");
	}

	public final Savepoint setSavepoint() throws SQLException {
		throw new SQLFeatureNotSupportedException("setSavepoint");
	}

	public final Savepoint setSavepoint(final String name) throws SQLException {
		throw new SQLFeatureNotSupportedException("setSavepoint name");
	}

	public final void releaseSavepoint(final Savepoint savepoint)
			throws SQLException {
		throw new SQLFeatureNotSupportedException("releaseSavepoint");
	}

	public final void rollback(final Savepoint savepoint) throws SQLException {
		throw new SQLFeatureNotSupportedException("rollback savepoint");
	}

	public final void abort(final Executor executor) throws SQLException {
		throw new SQLFeatureNotSupportedException("abort");
	}

	public final String getCatalog() throws SQLException {
		throw new SQLFeatureNotSupportedException("getCatalog");
	}

	public final void setCatalog(final String catalog) throws SQLException {
		throw new SQLFeatureNotSupportedException("setCatalog");
	}

	public final String getSchema() throws SQLException {
		throw new SQLFeatureNotSupportedException("getSchema");
	}

	public final void setSchema(final String schema) throws SQLException {
		throw new SQLFeatureNotSupportedException("setSchema");
	}

	public final Map<String, Class<?>> getTypeMap() throws SQLException {
		throw new SQLFeatureNotSupportedException("getTypeMap");
	}

	public final void setTypeMap(final Map<String, Class<?>> map)
			throws SQLException {
		throw new SQLFeatureNotSupportedException("setTypeMap");
	}

	public final int getNetworkTimeout() throws SQLException {
		throw new SQLFeatureNotSupportedException("getNetworkTimeout");
	}

	public final void setNetworkTimeout(final Executor executor,
			final int milliseconds) throws SQLException {
		throw new SQLFeatureNotSupportedException("setNetworkTimeout");
	}

	public final Clob createClob() throws SQLException {
		throw new SQLFeatureNotSupportedException("createClob");
	}

	public final Blob createBlob() throws SQLException {
		throw new SQLFeatureNotSupportedException("createBlob");
	}

	public final NClob createNClob() throws SQLException {
		throw new SQLFeatureNotSupportedException("createNClob");
	}

	public final SQLXML createSQLXML() throws SQLException {
		throw new SQLFeatureNotSupportedException("createSQLXML");
	}

	public final Array createArrayOf(final String typeName,
			final Object[] elements) throws SQLException {
		throw new SQLFeatureNotSupportedException("createArrayOf");
	}

	public final Struct createStruct(final String typeName,
			final Object[] attributes) throws SQLException {
		throw new SQLFeatureNotSupportedException("createStruct");
	}

	public final boolean isValid(final int timeout) throws SQLException {
		throw new SQLFeatureNotSupportedException("isValid");
	}

	public final Properties getClientInfo() throws SQLException {
		throw new SQLFeatureNotSupportedException("getClientInfo");
	}

	public final String getClientInfo(final String name) throws SQLException {
		throw new SQLFeatureNotSupportedException("getClientInfo name");
	}

	public final void setClientInfo(final String name, final String value)
			throws SQLClientInfoException {
		throw new UnsupportedOperationException("setClientInfo name value");
	}

	public final void setClientInfo(final Properties properties)
			throws SQLClientInfoException {
		throw new UnsupportedOperationException("setClientInfo properties");
	}

	public final boolean getAutoCommit() throws SQLException {
		return autoCommit;
	}

	public final void setAutoCommit(final boolean autoCommit)
			throws SQLException {
		this.autoCommit = autoCommit;
		if (getConnections().isEmpty()) {
			//recordMethodInvocation(Connection.class, "setAutoCommit",
			//		new Class[] { boolean.class }, new Object[] { autoCommit });
			return;
		}
		for (Connection each : getConnections()) {
			each.setAutoCommit(autoCommit);
		}
	}

	public final void commit() throws SQLException {
		for (Connection each : getConnections()) {
			each.commit();
		}
	}

	public final void rollback() throws SQLException {
		for (Connection each : getConnections()) {
			each.rollback();
		}
	}

	public final void close() throws SQLException {
		for (Connection each : getConnections()) {
			each.close();
		}
		closed = true;
	}

	public final boolean isClosed() throws SQLException {
		return closed;
	}

	public final boolean isReadOnly() throws SQLException {
		return readOnly;
	}

	public final void setReadOnly(final boolean readOnly) throws SQLException {
		this.readOnly = readOnly;
		if (getConnections().isEmpty()) {
			//recordMethodInvocation(Connection.class, "setReadOnly",
			//		new Class[] { boolean.class }, new Object[] { readOnly });
			return;
		}
		for (Connection each : getConnections()) {
			each.setReadOnly(readOnly);
		}
	}

	public final int getTransactionIsolation() throws SQLException {
		return transactionIsolation;
	}

	public final void setTransactionIsolation(final int level)
			throws SQLException {
		transactionIsolation = level;
		if (getConnections().isEmpty()) {
		//	recordMethodInvocation(Connection.class, "setTransactionIsolation",
		//			new Class[] { int.class }, new Object[] { level });
			return;
		}
		for (Connection each : getConnections()) {
			each.setTransactionIsolation(level);
		}
	}

	// -------以下代码与MySQL实现保持一致.-------

	public SQLWarning getWarnings() throws SQLException {
		return null;
	}

	public void clearWarnings() throws SQLException {
	}

	public final int getHoldability() throws SQLException {
		return ResultSet.CLOSE_CURSORS_AT_COMMIT;
	}

	public final void setHoldability(final int holdability) throws SQLException {
	}
	
	public abstract List<Connection> getConnections();

}
