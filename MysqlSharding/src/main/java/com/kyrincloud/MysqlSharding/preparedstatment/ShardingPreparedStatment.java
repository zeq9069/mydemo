package com.kyrincloud.MysqlSharding.preparedstatment;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.kyrincloud.MysqlSharding.resultset.ShardingResultSet;
import com.kyrincloud.MysqlSharding.util.Copy;

public class ShardingPreparedStatment extends AbstractShardingPreparedStatmentWrapper {

	private List<PreparedStatement> ps;
	
	public ShardingPreparedStatment(List<PreparedStatement> ps) {
		this.ps=ps;
	}

	@Override
	public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
		System.out.println("---execute 1---");
		throw new SQLException();
	}

	@Override
	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		System.out.println("---execute 2---");
		throw new SQLException();
	}

	@Override
	public boolean execute(String sql, String[] columnNames) throws SQLException {
		System.out.println("---execute 3---");
		throw new SQLException();
	}

	@Override
	public boolean execute(String sql) throws SQLException {
		System.out.println("---execute 4---");
		throw new SQLException();
	}

	@Override
	public ResultSet executeQuery(String sql) throws SQLException {
		System.out.println("---executeQuery 1---");
		throw new SQLException();
	}

	@Override
	public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
		System.out.println("---executeUpdate 1---");
		throw new SQLException();
	}

	@Override
	public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
		System.out.println("---executeUpdate 2---");
		throw new SQLException();
	}

	@Override
	public int executeUpdate(String sql, String[] columnNames) throws SQLException {
		System.out.println("---executeUpdate 3---");
		throw new SQLException();
	}

	@Override
	public int executeUpdate(String sql) throws SQLException {
		System.out.println("---executeUpdate 4---");
		throw new SQLException();
	}

	@Override
	public Connection getConnection() throws SQLException {
		System.out.println("---getConnection 1---");
		throw new SQLException();
	}

	@Override
	public boolean execute() throws SQLException {
		System.out.println("---execute 5---");
		throw new SQLException();
	}

	@Override
	public ResultSet executeQuery() throws SQLException {
		System.out.println("---executeQuery 2---");
		List<ResultSet> list = new ArrayList<ResultSet>();
		for(PreparedStatement p:ps){
			list.add(p.executeQuery());
		}
		return new ShardingResultSet(list);
	}

	@Override
	public int executeUpdate() throws SQLException {
		System.out.println("---executeUpdate 5---");
		throw new SQLException();
	}

}
