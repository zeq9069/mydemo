package com.kyrincloud.MysqlSharding.connection;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.kyrincloud.MysqlSharding.preparedstatment.ShardingPreparedStatment;

public class ShardingConnection extends AbstractShardingConnectionWrapper {

	
	private List<Connection> connections;
	
	
	public ShardingConnection(List<Connection> connections) {
		this.connections=connections;
	}

	@Override
	public Statement createStatement() throws SQLException {
		throw new SQLException("not support createStatement");
	}

	@Override
	public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException{
		throw new SQLException("not support createStatement");
	}

	@Override
	public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
		throw new SQLException("not support createStatement");
	}

	@Override
	public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency,
			int resultSetHoldability) throws SQLException {
		return new ShardingPreparedStatment(createPs(sql));
	}

	@Override
	public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency)
			throws SQLException {
		return new ShardingPreparedStatment(createPs(sql));
	}

	@Override
	public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
		return new ShardingPreparedStatment(createPs(sql));
	}

	@Override
	public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
		return new ShardingPreparedStatment(createPs(sql));
	}

	@Override
	public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
		return new ShardingPreparedStatment(createPs(sql));
	}

	@Override
	public PreparedStatement prepareStatement(String sql) throws SQLException {
		return new ShardingPreparedStatment(createPs(sql));
	}
	
	public List<Connection> getConnections(){
		return this.connections;
	}
	
	private List<PreparedStatement> createPs(String sql) throws SQLException{
		List<PreparedStatement> list=new ArrayList<PreparedStatement>();
		for(Connection conn:connections){
			list.add(conn.prepareStatement(sql));
		}
		return list;
	}
	
}
