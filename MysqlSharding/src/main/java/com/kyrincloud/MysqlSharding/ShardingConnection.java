package com.kyrincloud.MysqlSharding;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;

public class ShardingConnection extends AbstractShardingConnectionWrapper {

	public ShardingConnection(Connection connection) {
		super(connection);
	}

	@Override
	public Statement createStatement() throws SQLException {
		System.out.println("---createStatement 1---");
		return connection.createStatement();
	}

	@Override
	public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability)
			throws SQLException {
		System.out.println("---createStatement 2---");
		return connection.createStatement();
	}

	@Override
	public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
		System.out.println("---createStatement 3---");
		return connection.createStatement(resultSetType, resultSetConcurrency);
	}

	@Override
	public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency,
			int resultSetHoldability) throws SQLException {
		System.out.println("---prepareStatement 1---");
		return new ShardingPreparedStatment(connection.prepareStatement(sql, resultSetType, resultSetConcurrency,
				resultSetHoldability));
	}

	@Override
	public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency)
			throws SQLException {
		System.out.println("---prepareStatement 2---");
		return new ShardingPreparedStatment(connection.prepareStatement(sql, resultSetType, resultSetConcurrency));
	}

	@Override
	public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
		System.out.println("---prepareStatement 3---");
		return new ShardingPreparedStatment(connection.prepareStatement(sql, autoGeneratedKeys));
	}

	@Override
	public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
		System.out.println("---prepareStatement 4---");
		return new ShardingPreparedStatment(connection.prepareStatement(sql, columnIndexes));
	}

	@Override
	public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
		System.out.println("---prepareStatement 5---");
		return new ShardingPreparedStatment(connection.prepareStatement(sql, columnNames));
	}

	@Override
	public PreparedStatement prepareStatement(String sql) throws SQLException {
		System.out.println("---prepareStatement 6---");
		return new ShardingPreparedStatment(connection.prepareStatement(sql));
	}

}
